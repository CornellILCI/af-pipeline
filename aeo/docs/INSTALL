Simba v.0002 INSTALL NOTES

Victor Jun Ulat, CIMMYT
v.ulat@cgiar.org

Updated: 2019.06.21
Modified for ebs-af: 2020.07.27

Server
* Installed Ubuntu 18.04 server edition on a virtual machine
  with quad core processor, 2 GB RAM and 25GB hard drive 
  space.
* Machine name (hostname)  is set as thrymr0 but you can 
  assign your own. The machine name will be used in the 
  SLURM configuration section.
* User name: Analytics Admin; profile: aadmin; password:
  analyticsAdmin
* On first boot: sudo apt update && sudo apt -y upgrade

Optional: Remove cloud-init
* sudo dpkg-reconfigure cloud-init (deselect all options
  except [*] None: Failsafe datasource
* sudo apt-get purge cloud-init
* sudo mv /etc/cloud/ ~/
* sudo mv /var/lib/cloud/ ~/cloud-lib
* sudo systemctl show -p WantedBy network-online.target
* sudo systemctl disable open-iscsi.service
* sudo apt remove open-iscsi
* sudo shutdown -r now
* sudo apt-get update && sudo apt-get upgrade
* sudp apt autoremove 

Install a Mail Client
* This is useful for troubleshooting cron installs. 
* sudo apt-get update && sudo apt-get upgrade
* sudo apt-get -y install mailutils
   - Choose "local only" and accept defaults.
  
Install PostgreSQL
* sudo apt-get update && sudo apt-get upgrade
* sudo apt-get install postgresql postgresql-contrib
* sudo su - postgres
* createuser --interactive
   - Enter name of the role to add: aadmin
   - Shall the new role be a superuser? (y/n) y
   - exit

Optional: Configure postgresql for remote connections
* This is required for cluster environment. You need to 
  be root or use sudo.
* Edit postgresql.conf (in Ubuntu 18.04, it is located
  in: /etc/postgresql/10/main/), uncomment the section
    #listen_addresses = 'localhost'
  and replace localhost with '*':
    listen_addresses = '*'
* Edit pg_hba.conf (in Ubuntu 18.04, it is located in:
  /etc/postgresql/10/main/), add the following line:
  host   all   all   all         md5
  To allow access to all databases for all users with
  encryted password. Also change IPv6 and IPv4 local 
  connection settings to:
  #IPv4 local connections
  host  all   all    0.0.0.0/0   md5
  #IPv6 local connections
  host  all   all    ::0/0       md5
* Restart postgreql server:
  - sudo systemctl restart postgresql   
* Note: You might need to adjust your firewall settings.
  (Consult your System/Network Administrator for this.) 

Install psycopg2 and UUID (Python3 PostgreSQL interface)
* sudo apt-get update && sudo apt-get upgrade
* sudo apt-get -y install python3-psycopg2 UUID

Install Git
* sudo apt-get install git

Clone ebs-af
* git clone https://gitlab.com/vulat/ebs-af.git
   - Username: <gitlab username>
   - Password: <gitlab password>

Set EBSAF_ROOT environment variable
* If there is no .bash_profile add this at the end of 
  .profile:
    export EBSAF_ROOT=/home/aadmin/ebs-af
* Logout and login.
* To check for EBSAF_ROOT, type: 
   - echo $EBSAF_ROOT
   - it should print out: /home/aadmin/ebs-af
* Note: If installed in a cluster, this should be done for
  all nodes.

Create psql database
* createdb analytics
* Add password: sudo -u aadmin psql analytics, then:
  ALTER USER aadmin WITH PASSWORD 'analyticsAdmin';
* Type "\q" to exit.
* Import/Restore schema: cd to /home/aadmin/ebs-af/aeo/database 
  and type:
    psql -U aadmin analytics < 2020.07.21-analytics.pg.sql

Install R
* sudo apt-get update && sudo apt-get upgrade
* sudo apt-get install -y r-base libgfortran3

Install Required packages
* sudo R (install packages for all users)
   - install.packages('/home/aadmin/ebs-af/models/packages/getopt_1.20.2.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/optparse_1.6.1.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/R.methodsS3_1.7.1.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/R.oo_1.22.0.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/DiGGer_0.2-31_R_x86_64-unknown-linux-gnu.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/Rcpp_1.0.0.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/plyr_1.8.4.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/PBTools_2.0.0.tar.gz', repos=NULL, type='source')
   - install.packages('/home/aadmin/ebs-af/models/packages/ebsRtools_0.2.0.tar.gz' repos=NULL, type='source')
* exit R by, typing q() and hitting enter.

Install SLURM
* Note: This slurm install is only for a single node 
  configuration. This document will be updated for 
  installation on multi-node (cluster) environment.
* sudo apt-get -y install munge slurm-wlm
* Go to simba/slurm and copy slurm.tmpl to slurm.conf
* Edit slurm.conf and change values according to the name of
  your machine, in this case machine name is thrymr0 (search
  for the lines that):
    ControlMachine=thrymr0
    ClusterName=thrymr0
    NodeName=thrymr0 Sockets=1 CoresPerSocket=4 ThreadsPerCore=1 State=UNKNOWN 
    PartitionName=thrymr0 Nodes=thrymr0 Default=YES MaxTime=INFINITE State=UP
* Alternatively, you can run genSLURMconf.pl without arguments
  from within the /home/aadmin/ebs-af/aeo/slurm directory to generate 
  slurm.conf from slurm.tmpl: 
    - ./genSLURMconf.pl
* Copy/Move slurm.conf to /etc/slurm-llnl/
*  sudo cp slurm.conf /etc/slurm-llnl/
* Enable and start the manager slurmctld:
   - sudo systemctl enable slurmctld
   - sudo systemctl start slurmctld
* Enable and start the agent slurmd
   - sudo systemctl enable slurmd
   - sudo systemctl start slurmd
* Check status:
   - sinfo
   - scontrol show node

Create simba.conf file
* Go to ebs-af/aeo/conf and copy simba.tmpl to simba.conf
* Edit simba.conf to match your settings:
    age (age of file (in days) to delete)
    set (number of files per folder in archive)
    rtd (root directory, /home/aadmin/ebs-af/aeo)
    bin (executables directory)
    int (input directory)
    wrd (working directory)
    out (output directory)
    mdl (models directory, /home/aadmin/ebs-af/models)
    ldg (logs directory)
    arch (archive directory)
    slg (path to simba.LOG file)
    dbh (server: currently localhost, for cluster install,
        specific ip address should be used.)
    dpt (port)
    dbn (database name)
    dbu (database user)
    dbp (database user password)
    r344 (location of R 3.4.4 executable; i.e. /usr/bin)
    asm (AsREML path)
    bsh (bash executable)
* Make sure that the directories you specified are
  writable.
* Values for int, wrd, out, arch and mdl can be symbolic 
  links to folders in data volumes.

Install webapi
* Install flask and gunicorn
  * sudo apt-get update && sudo apt-get -y upgrade
  * sudo apt-get install python3-pip python3-dev
  * pip3 install gunicorn flask
* Run the service
  * cd /home/aadmin/ebs-af/api/v1
  * gunicorn --bind 0.0.0.0:5000 wsgi:app

Test the install
* Go to folder ebs-af/aeo/test and generate request files:
   - ./genTest.py -m auto 10
   - This will generate 10 request files and submit it.
* Check ebs-af/aeo/logs, output folders for errors.

Install cleaner.py as cron job to periodically delete old
output files (clear the output directory of files that are
more than a month old).
* crontab -e
    - If first time you invoked cron, you will be made to 
      choose which editor to use (chose option 3, for 
      vim.basic)
* Add the following line before the line  # m h dom mon ...:
    - EBSAF_ROOT=/home/aadmin/ebs-af/
    - Then add after the line:
      - 0 23 * * 6 /home/aadmin/ebs-af/aeo/bin/cleaner.py
   Save and exit (if using vim: shift+:wq)
* This will run cleaner.py 11pm every Saturday.
* Check system mail if to see any messages (type "mail").
* Check simba.LOG at ~/ebs-af/aeo/logs for errors.

Running ebs-af in a container 
(WARNING: This section is incomplete!)
* Install docker
   - sudo apt-get update && sudo apt-get upgrade
   - sudo apt-get install docker.io
     Verify install: docker --version
     Make sure docker starts after reboot:
     - sudo systemctl start docker
     - sudo systemctl enable docker
     - sudo docker info
* Create an empty folder:
   - mkdir simba-container
   - copy contents of ~/ebs-af/aeo/docker to simba-container
   - rename all *.tmpl files to *.conf
* Clone simba and nala inside the container
* Build the container (this will build a docker image that
  has R and SLURM. PostgreSQL is assumed to be installed in
  the host. This document will be updated for building an
  image that contains PostGreSQL).
  - sudo docker build -t rafiki .
  - This may take a while, but after it finishes, confirm
    by executing:
    - sudo docker images
    - This will list available images, make sure rafiki is
      listed.
  - Create a simba.conf file following the steps above. But
    take note that the ebs-af root in the container is at
    /ebs-af.
  - Specify the input, output, working folders.
  - Run the container:
    - sudo docker run -h rafiki -ti -d --name rafiki -v \
      <ebs-af folder>:/ebs-af rafiki:latest
